generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String           @id @default(uuid())
  name                 String?
  email                String?          @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  plans                SubscriptionPlan[]
  wallet               Wallet?
  walletId             String?          @unique
  notifications        Notification[]
  transactions         Transaction[]
  notificationPreference Boolean        @default(true)
  apiKey               String?          @unique // Added for API integration
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SubscriptionPlan {
  id              String        @id @default(uuid())
  userId          String
  name            String
  price           Float
  interval        String
  duration        Int?          @default(30) // Default duration in days (e.g., 30 for monthly)
  trialDays       Int?          @default(0)  // Default to 0 trial days
  contractAddress String        // Made non-nullable since every plan needs a contract
  status          String        @default("ACTIVE") // Added status (e.g., ACTIVE, INACTIVE)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    Transaction[]
}

model Wallet {
  id        String   @id @default(uuid())
  userId    String   @unique
  address   String   @unique
  balance   Float    @default(0.0)
  currency  String   @default("ETH")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id             String            @id @default(uuid())
  userId         String
  planId         String
  amount         Float
  txHash         String            @unique
  status         String            @default("PENDING") // Added status (e.g., PENDING, COMPLETED, FAILED)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription   SubscriptionPlan  @relation(fields: [planId], references: [id], onDelete: Cascade)
}